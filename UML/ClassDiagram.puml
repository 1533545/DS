@startuml

skinparam linetype ortho

/' Back End '/
package "Kernel" #DDDDDD {

  Abstract Component {
      #fatherNode : Component
      #id : String
      #name : String
      #description: String
      #startTime: LocalDateTime
      #finishTime: LocalDateTime
      #Component(fatherNode: Project, name : String, description : String)
      #Component(jsonObject: JSONObject)
      #UpdateTime()



  }

  class Project {
     +Project(fatherNode: Project, name : String, description : String)
     +Project(jsonObject: JSONObject)
     +RemoveComponent(id: String) : void
     +AddComponent(Component : ProjectComponent) : void
     +toJson(): JSONObject
     +getDuration() : Duration
     +print(indentation : int)
  }

  class Task {
    -_intervals: list<Interval>
    -_runningInterval : Interval
    +Task(fatherNode: Project, name : String, description : String)
    +Task(jsonObject: JSONObject)
    +toJson(): JSONObject
    +addInterval(): void
    +startTask() : void
    +finishTask() : void
    +getDuration() : Duration
    +print(indentation : int)
  }

  class Interval {
    -_start : LocalDateTime
    -_end : LocalDateTime
    -_fatherTask : Task
    +Interval(task : Task)
    +Interval(jsonObject: JSONObject)
    +toJson():JSONObject
    +getDuration() : Duration
    +printTimes() : void
  }

  class Clock{
  -_timer: Timer
  -_clock: Clock
  -_cancelTimer: boolean
  +getInstance() : Clock
  +startClock() : void
  +stopClock() : void
  -tick() : void
  }

  class JsonReader {
    + {static} readJson(fileName:String) : JSONObject
  }

  class JsonWriter {
    + {static} saveJson(json:JSONObject) : void
    + {static} saveJsonPrettier(json:JSONObject) : void
  }

  package "java.util"
  {
      abstract Observable {
        +AddObserver(o:Observer) : void
        +DeleteObserver(o:Observer) : void
        +DeleteObservers() : void
        #SetChanged() : void
        +HasChanged() : bool
        #ClearChanged() : void
        +NotifyObservers(arg:object) : void
      }
      interface Observer
      {
           +void Update(observable : Observable, arg: object )
      }
      Observable "0..N" *--> "1" Observer:ObserverList
  }

}

/' Relationship '/
  Task -right-|> Component
  Component <|-- Project
  Component "N" --o "1" Project : Children
  Task "1" o-- "0..N" Interval
  Interval ..|> Observer
  Clock --|> Observable

@enduml
